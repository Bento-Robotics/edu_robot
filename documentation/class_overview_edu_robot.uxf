<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="13.3">
  <zoom_level>8</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2984</x>
      <y>664</y>
      <w>704</w>
      <h>192</h>
    </coordinates>
    <panel_attributes>EthernetGatewayShield
--
- _communicator : std::shared_ptr&lt;EthernetCommunicator&gt;
- _clock : std::shared_ptr&lt;rclcpp::Clock&gt;
- _diagnostic : struct {
    std::shared_ptr&lt;diagnostic::MeanDiagnostic&lt;float, std::less&lt;float&gt;&gt;&gt; voltage;
    std::shared_ptr&lt;diagnostic::MeanDiagnostic&lt;float, std::greater&lt;float&gt;&gt;&gt; current;
    std::shared_ptr&lt;diagnostic::MeanDiagnostic&lt;float, std::greater&lt;float&gt;&gt;&gt; temperature;
    std::shared_ptr&lt;diagnostic::StandardDeviationDiagnostic&lt;std::uint64_t, std::greater&lt;std::uint64_t&gt;&gt;&gt; processing_dt;
    rclcpp::Time last_processing;
  };
--
+ EthernetGatewayShield(char const* const ip_address, const std::uint16_t port)
+ getCommunicator() : std::shared_ptr&lt;EthernetCommunicator&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3064</x>
      <y>496</y>
      <w>544</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>ProcessingComponentOutput
--
-_name : std::string
-_inputs : std::vector&lt;std::shared_ptr&lt;ProcessingComponentInput&lt;Output&gt;&gt;&gt;
--
+ ProcessingComponentOutput(const std::string&amp; name)
+ name() const : const std::string&amp; 
+ registerComponentInput(std::shared_ptr&lt;ProcessingComponentInput&lt;Output&gt;&gt; input) : void
# sendInputValue(const Output&amp; value) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2984</x>
      <y>896</y>
      <w>704</w>
      <h>128</h>
    </coordinates>
    <panel_attributes>EthernetCommunicator
--

--
+ EthernetCommunicator(char const* const ip_address, const std::uint16_t port)
+ sendRequest(Request request) : std::future&lt;Request&gt;
+ registerRxDataEndpoint(RxDataEndPoint&amp;&amp; endpoint) : void
+ getRxBuffer() : tcp::message::RxMessageDataBuffer</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1768</x>
      <y>1056</y>
      <w>272</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>&lt;&lt;interface&gt;&gt;
/HardwareRobotInterface/
--
#_report : RobotStatusReport
--
/+enable() : void = 0/
/+disable() : void = 0/
/+getStatusReport() : RobotStatusReport = 0/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3304</x>
      <y>592</y>
      <w>24</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3312</x>
      <y>848</y>
      <w>24</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2320</x>
      <y>672</y>
      <w>216</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>EthernetGatewayDevice
--
- _name : std::string
--
+ name() const : const std::string&amp;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2072</x>
      <y>792</y>
      <w>448</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>EthernetGatewayRxDevice
--

--
/+processRxData(const tcp::message::RxMessageDataBuffer&amp; data) = 0 : void/
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2528</x>
      <y>792</y>
      <w>448</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>EthernetGatewayTxDevice
--
# _tx_buffer : tcp::message::TxMessageDataBuffer
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2184</x>
      <y>1024</y>
      <w>480</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>EthernetGatewayTxRxDevice
--
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2280</x>
      <y>848</y>
      <w>160</w>
      <h>192</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0;180.0;50.0;180.0;220.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2416</x>
      <y>848</y>
      <w>392</w>
      <h>192</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>470.0;10.0;470.0;50.0;10.0;50.0;10.0;220.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2272</x>
      <y>728</y>
      <w>168</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>190.0;10.0;190.0;50.0;10.0;50.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2416</x>
      <y>728</y>
      <w>392</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0;470.0;50.0;470.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2256</x>
      <y>1192</y>
      <w>360</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>ImuSensorHardware
--
--
+ initialize(const ImuSensor::Parameter&amp; parameter) : void
- processMeasurement() : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1208</x>
      <y>864</y>
      <w>568</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>/Sensor/
--

--
+ name() const : const std::string&amp;
+ frameId() const : const std::string&amp; 
+ getTransformMsg(const rclcpp::Time stamp) const : geometry_msgs::msg::TransformStamped</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1456</x>
      <y>1056</y>
      <w>296</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>SensorImu
--
- _hardware_interface : HardwareSensorInterface
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1592</x>
      <y>1136</y>
      <w>680</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;110.0;830.0;110.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2416</x>
      <y>1080</y>
      <w>24</w>
      <h>128</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;140.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2608</x>
      <y>960</y>
      <w>392</w>
      <h>288</h>
    </coordinates>
    <panel_attributes>lt=-</panel_attributes>
    <additional_attributes>10.0;340.0;260.0;340.0;260.0;10.0;470.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1496</x>
      <y>960</y>
      <w>24</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>768</x>
      <y>328</y>
      <w>544</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>Robot
--

--
+ registerLighting(std::shared_ptr&lt;Lighting&gt; lighting) : void
+ void registerMotorController(std::shared_ptr&lt;MotorController&gt; motor_controller) : void
+ void registerSensor(std::shared_ptr&lt;Sensor&gt; sensor) : void
+ getKinematicMatrix(const DriveKinematic kinematic) const = 0 : Eigen::MatrixXf
+ switchKinematic(const DriveKinematic kinematic) : void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1352</x>
      <y>296</y>
      <w>656</w>
      <h>128</h>
    </coordinates>
    <panel_attributes>HardwareComponentFactory
--
--
+ lightingHardware() : std::map&lt;std::string, std::shared_ptr&lt;Lighting::ComponentInterface&gt;&gt;
+ motorControllerHardware() : std::map&lt;std::string, std::shared_ptr&lt;MotorController::ComponentInterface&gt;&gt;
+ motorSensorHardware() : std::map&lt;std::string, std::shared_ptr&lt;MotorController::SensorInterface&gt;&gt;
+ rangeSensorHardware() : std::map&lt;std::string, std::shared_ptr&lt;RangeSensor::SensorInterface&gt;&gt;
+ imuSensorHardware() : std::map&lt;std::string, std::shared_ptr&lt;ImuSensor::SensorInterface&gt;&gt;
  
  
  

  </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>560</x>
      <y>1240</y>
      <w>528</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>HardwareSensorInterface
--

--
+registerCallbackProcessMeasurementData(ProcessMeasurementCallback callback) : void
/+initialize(const Parameter&amp; parameter) = 0 : void/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2080</x>
      <y>496</y>
      <w>952</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>HardwareComponentFactory
--
+ addLighting(const std::string&amp; lighting_name, const std::string&amp; hardware_name) : HardwareComponentFactory&amp;
+ addMotorController(const std::string&amp; motor_name, const std::string&amp; hardware_name) : HardwareComponentFactory&amp;
+ addSingleChannelMotorController(const std::string&amp; motor_name, const std::string&amp; hardware_name) : HardwareComponentFactory&amp;
+ addRangeSensor(const std::string&amp; sensor_name, const std::string&amp; hardware_name, const std::uint8_t id, rclcpp::Node&amp; ros_node) : HardwareComponentFactory&amp;
+ addImuSensor(const std::string&amp; sensor_name, const std::string&amp; hardware_name, rclcpp::Node&amp; ros_node) : HardwareComponentFactory&amp;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1672</x>
      <y>416</y>
      <w>896</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0;1100.0;50.0;1100.0;100.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>816</x>
      <y>1136</y>
      <w>752</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>920.0;10.0;920.0;70.0;10.0;70.0;10.0;130.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>16</x>
      <y>1240</y>
      <w>528</w>
      <h>144</h>
    </coordinates>
    <panel_attributes>HardwareComponentInterface
--

--
/+processSetValue(const Data&amp;... values) = 0 : void/
/+initialize(const Parameter&amp; parameter) = 0 : void/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>632</x>
      <y>1056</y>
      <w>488</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>MotorController
--
- _hardware_sensor_interface : std::shared_ptr&lt;SensorInterface&gt;
- _hardware_component_interface : std::shared_ptr&lt;ComponentInterface&gt;
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>0</x>
      <y>256</y>
      <w>2056</w>
      <h>1400</h>
    </coordinates>
    <panel_attributes>eduard::robot
layer=-1
bg=#CCFFCC</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>2064</x>
      <y>256</y>
      <w>1640</w>
      <h>1400</h>
    </coordinates>
    <panel_attributes>eduard::robot::ethernet
layer=-1
bg=#CCCCFF</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2016</x>
      <y>632</y>
      <w>984</w>
      <h>440</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;530.0;10.0;10.0;1050.0;10.0;1050.0;140.0;1210.0;140.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>872</x>
      <y>760</y>
      <w>552</w>
      <h>312</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>670.0;10.0;670.0;70.0;10.0;70.0;10.0;370.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1400</x>
      <y>760</y>
      <w>448</w>
      <h>312</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0;540.0;70.0;540.0;370.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>320</x>
      <y>1136</y>
      <w>472</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>570.0;10.0;570.0;70.0;10.0;70.0;10.0;130.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>768</x>
      <y>1136</y>
      <w>24</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;130.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>56</x>
      <y>1056</y>
      <w>488</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>Lighting
--
- _hardware_interface : std::shared_ptr&lt;ComponentInterface&gt;
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>200</x>
      <y>1136</y>
      <w>24</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;130.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1280</x>
      <y>672</y>
      <w>280</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>DiagnosticComponent</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1400</x>
      <y>760</y>
      <w>24</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;130.0</additional_attributes>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>1224</x>
      <y>568</y>
      <w>376</w>
      <h>232</h>
    </coordinates>
    <panel_attributes>diagnostic
bg=#BBFFBB</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>584</x>
      <y>536</y>
      <w>160</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enum&gt;&gt;
DriveKinematic
--
  SKID_DRIVE
  MECANUM_DRIVE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>416</x>
      <y>328</y>
      <w>336</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>Rpm
--
- _value = 0.0f : float
--
+ static fromRps(const float value) : constexpr Rpm
+ static fromRadps(const float value) : constexpr Rpm
+ rps() const : constexpr float
+ radps() const : constexpr float

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>784</x>
      <y>0</y>
      <w>560</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>rclcpp
layer=-1
bg=#FFCCCC</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1000</x>
      <y>152</y>
      <w>80</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>Node</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1032</x>
      <y>168</y>
      <w>24</w>
      <h>176</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;200.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1696</x>
      <y>576</y>
      <w>288</w>
      <h>176</h>
    </coordinates>
    <panel_attributes>StatusReport
--
+ temperature : float
{innerclass
voltage
--
+ mcu : float
+ drive : float
innerclass}
{innerclass
current
--
+ mcu : float
+ drive : float
innerclass}
+ rpm : std::vector&lt;Rpm&gt;
+ status_emergency_stop : bool</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>184</x>
      <y>576</y>
      <w>184</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>RobotState
--
+ state : State
+ mode : Mode
+ info_message : std::string</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>536</x>
      <y>736</y>
      <w>240</w>
      <h>96</h>
    </coordinates>
    <panel_attributes>Mode
--
+ robot_mode : RobotMode
+ drive_kinematic : DriveKinematic
+ feature_mode : FeatureMode</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>200</x>
      <y>328</y>
      <w>200</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enum&gt;&gt;
State
--
  OK
  CHARGER_CONNECTED
  MOTOR_ERROR
  LOW_BATTERY
  EMERGENCY_STOP
  UART_SENDING_FAILED
  UART_RECEIVING_FAILED
  SHIELD_REQUEST_TIMEOUT
  TCP_SOCKET_ERROR</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>392</x>
      <y>536</y>
      <w>160</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enum&gt;&gt;
RobotMode
--
  UNCONFIGURED
  INACTIVE    
  REMOTE_CONTROLLED
  AUTONOMOUS       
  CHARGING</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>768</x>
      <y>536</y>
      <w>216</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>&lt;&lt;enum&gt;&gt;
FeatureMode
--
  NONE
  COLLISION_AVOIDANCE_OVERRIDE
  COLLISION_AVOIDANCE</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>464</x>
      <y>640</y>
      <w>208</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>240.0;120.0;240.0;70.0;10.0;70.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>648</x>
      <y>640</y>
      <w>24</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;120.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>648</x>
      <y>640</y>
      <w>240</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;120.0;10.0;70.0;280.0;70.0;280.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1904</x>
      <y>744</y>
      <w>24</w>
      <h>328</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;390.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3024</x>
      <y>1520</y>
      <w>384</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>DummyMotorControllerHardware
--
--
+ processSetValue(const Rpm&amp; rpm) : void
+ initialize(const MotorController::Parameter&amp; parameter) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>2544</x>
      <y>1368</y>
      <w>440</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>SingleChannelMotorControllerHardware
--
--
+ processSetValue(const Rpm&amp; rpm)
+ initialize(const MotorController::Parameter&amp; parameter) : void
+ processRxData(const tcp::message::RxMessageDataBuffer&amp; data) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>3000</x>
      <y>1368</y>
      <w>464</w>
      <h>104</h>
    </coordinates>
    <panel_attributes>CompoundMotorControllerHardware
--
--
+ processSetValue(const Rpm&amp; rpm)
+ initialize(const MotorController::Parameter&amp; parameter) : void
+ processRxData(const tcp::message::RxMessageDataBuffer&amp; data) : void
+ dummyMotorController() const : const std::shared_ptr&lt;DummyMotorControllerHardware&gt;&amp;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>3208</x>
      <y>1464</y>
      <w>24</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1096</x>
      <y>1136</y>
      <w>1696</w>
      <h>248</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
fg=red</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;250.0;2100.0;250.0;2100.0;290.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1096</x>
      <y>1136</y>
      <w>2104</w>
      <h>248</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
fg=red</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;250.0;2610.0;250.0;2610.0;290.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2448</x>
      <y>1080</y>
      <w>768</w>
      <h>304</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
fg=red</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0;940.0;70.0;940.0;360.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>2448</x>
      <y>1080</y>
      <w>368</w>
      <h>304</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
fg=red</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0;440.0;70.0;440.0;360.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1152</x>
      <y>1056</y>
      <w>288</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>SensorRange
--
- _hardware_interface : HardwareSensorInterface
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1288</x>
      <y>960</y>
      <w>232</w>
      <h>112</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>270.0;10.0;270.0;70.0;10.0;70.0;10.0;120.0</additional_attributes>
  </element>
</diagram>
