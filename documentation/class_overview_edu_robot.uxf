<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="13.3">
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>360</x>
      <y>300</y>
      <w>880</w>
      <h>240</h>
    </coordinates>
    <panel_attributes>EthernetGatewayShield
--
- _communicator : std::shared_ptr&lt;EthernetCommunicator&gt;
- _clock : std::shared_ptr&lt;rclcpp::Clock&gt;
- _diagnostic : struct {
    std::shared_ptr&lt;diagnostic::MeanDiagnostic&lt;float, std::less&lt;float&gt;&gt;&gt; voltage;
    std::shared_ptr&lt;diagnostic::MeanDiagnostic&lt;float, std::greater&lt;float&gt;&gt;&gt; current;
    std::shared_ptr&lt;diagnostic::MeanDiagnostic&lt;float, std::greater&lt;float&gt;&gt;&gt; temperature;
    std::shared_ptr&lt;diagnostic::StandardDeviationDiagnostic&lt;std::uint64_t, std::greater&lt;std::uint64_t&gt;&gt;&gt; processing_dt;
    rclcpp::Time last_processing;
  };
--
+ EthernetGatewayShield(char const* const ip_address, const std::uint16_t port)
+ getCommunicator() : std::shared_ptr&lt;EthernetCommunicator&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>130</x>
      <y>90</y>
      <w>680</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>ProcessingComponentOutput
--
-_name : std::string
-_inputs : std::vector&lt;std::shared_ptr&lt;ProcessingComponentInput&lt;Output&gt;&gt;&gt;
--
+ ProcessingComponentOutput(const std::string&amp; name)
+ name() const : const std::string&amp; 
+ registerComponentInput(std::shared_ptr&lt;ProcessingComponentInput&lt;Output&gt;&gt; input) : void
# sendInputValue(const Output&amp; value) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>360</x>
      <y>590</y>
      <w>880</w>
      <h>160</h>
    </coordinates>
    <panel_attributes>EthernetCommunicator
--

--
+ EthernetCommunicator(char const* const ip_address, const std::uint16_t port)
+ sendRequest(Request request) : std::future&lt;Request&gt;
+ registerRxDataEndpoint(RxDataEndPoint&amp;&amp; endpoint) : void
+ getRxBuffer() : tcp::message::RxMessageDataBuffer</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>840</x>
      <y>90</y>
      <w>340</w>
      <h>130</h>
    </coordinates>
    <panel_attributes>&lt;&lt;interface&gt;&gt;
/RobotHardwareInterface/
--
#_report : RobotStatusReport
--
/+enable() : void = 0/
/+disable() : void = 0/
/+getStatusReport() : RobotStatusReport = 0/</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>430</x>
      <y>210</y>
      <w>390</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0;370.0;50.0;370.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>790</x>
      <y>210</y>
      <w>250</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>230.0;10.0;230.0;50.0;10.0;50.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>770</x>
      <y>530</y>
      <w>30</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
</diagram>
